package org.jugsummercamp.part12_collections

object Collections extends App  {
  // one year ago üòâ
  
  val aliments = List(
      "üçû"
    , "üçÉ"
    , "üçÖ"
    , "üçñ"
    , "üçü"
    , "üò≠" // üò° pas d'emoji oignons    
  )

  println(aliments)  // 1Ô∏è‚É£

  // === action recette ===
  def decouper(aliment: String): String = s"morceaux de $aliment"

  // === choix aliments ===
  def sansFrite(aliment: String): Boolean = aliment != "üçü"
  def sansOignon(aliment: String): Boolean = aliment != "üò≠"

  // === filtrer, puis d√©couper ===
  val ingredients = 
    aliments
      .filter(sansFrite)
      .filter(sansOignon)
      .map(decouper)  // List is a Functor ... even a Monad (and a container)

  println(ingredients) // 2Ô∏è‚É£

  // === assembler ==== aka reduce
  val kebab = 
    ingredients
      .fold("ü•ô avec: ") { (tmp, ingredient) => tmp + ingredient + " "}

  println(kebab) // 3Ô∏è‚É£

  println(
    aliments
      .filter(sansFrite)
      .map(decouper)
      .fold("ü•ô avec: ") { (tmp, ingredient) => tmp + ingredient + " "}
  ) // 4Ô∏è‚É£


} 